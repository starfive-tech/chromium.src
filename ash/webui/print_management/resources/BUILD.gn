# Copyright 2020 The Chromium Authors
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//build/config/chromeos/ui_mode.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//tools/polymer/css_to_wrapper.gni")
import("//tools/polymer/html_to_wrapper.gni")
import("//tools/typescript/ts_library.gni")
import("//ui/webui/resources/tools/generate_grd.gni")

assert(is_chromeos_ash)

# The directory where most files will be processed into,
# and where ts_library inputs from.
preprocess_folder = "preprocessed"

# The directory where HTML and CSS files will be processed into.
# Ultimately, files in this directory will be processed into $preprocess_folder.
html_css_preprocess_folder = "preprocessed_html_css_wrapper_files"

# When adding a new file to this app, add it to one of the lists below.
# `non_web_component_files` are plain TS and JS files.
# `web_component_files` are Polymer based TS and JS files.
# `css_files` are CSS files that are Polymer shared style modules.
# `static_resource_files` are static files that don't need
#     to be processed, e.g. images

non_web_component_files = [ "mojo_interface_provider.ts" ]

web_component_files = [
  "print_job_clear_history_dialog.ts",
  "print_job_entry.ts",
  "print_management.ts",
]

static_resource_files = [
  "index.html",
  "print_management_192.png",
]

# Files that are passed as input to css_to_wrapper().
css_files = [
  "print_management_fonts.css",
  "print_management_shared.css",
]

# Files that are generated by css_to_wrapper().
css_to_wrapper_output_files = []
foreach(f, css_files) {
  # e.g. colors.css -> colors.css.ts
  css_to_wrapper_output_files += [ f + ".ts" ]
}

# Process raw CSS files into wrapped files suitable for importing into TS.
css_to_wrapper("css_to_wrapper_files") {
  in_files = css_files
  in_folder = "."
  out_folder = "$target_gen_dir/$html_css_preprocess_folder"
}

# Files that are passed as input to html_to_wrapper().
html_files = []
foreach(f, web_component_files) {
  # e.g. my_element.ts -> my_element.html
  html_files += [ string_replace(f, ".ts", ".html") ]
}

all_html_files = html_files + [ "icons.html" ]

# Files that are generated by html_to_wrapper().
html_to_wrapper_output_files = []
foreach(f, all_html_files) {
  # e.g. my_element.html -> my_element.html.ts
  html_to_wrapper_output_files += [ f + ".ts" ]
}

# Process raw HTML files into wrapped files suitable for importing into TS.
html_to_wrapper("html_to_wrapper_files") {
  in_files = all_html_files
  in_folder = "."
  out_folder = "$target_gen_dir/$html_css_preprocess_folder"
}

ts_files = non_web_component_files + web_component_files

# This target is meant to process "if expressions" (e.g. <if expr="cond">...</if>).
# In practice, the following two targets just copy files into the $preprocess_folder.
preprocess_if_expr("preprocess") {
  in_files = ts_files
  in_folder = "."
  out_folder = "$target_gen_dir/$preprocess_folder"
}

preprocess_if_expr("preprocess_html_css") {
  deps = [
    ":css_to_wrapper_files",
    ":html_to_wrapper_files",
  ]
  in_files = html_to_wrapper_output_files + css_to_wrapper_output_files
  in_folder = "$target_gen_dir/$html_css_preprocess_folder"
  out_folder = "$target_gen_dir/$preprocess_folder"
}

# The WebUI mojo files are generated by mojom:mojom_webui_js into an
# external directory, so they need to be copied into this project's directory.
copy("copy_webui_mojo") {
  deps = [ "../mojom:mojom_webui_js" ]
  sources = [ "$root_gen_dir/mojom-webui/ash/webui/print_management/mojom/printing_manager.mojom-webui.js" ]
  outputs = [ "$target_gen_dir/$preprocess_folder/{{source_file_part}}" ]
}

ts_library("build_ts") {
  composite = true
  root_dir = "$target_gen_dir/$preprocess_folder"
  out_dir = "$target_gen_dir/tsc"
  tsconfig_base = "tsconfig_base.json"
  in_files = ts_files + html_to_wrapper_output_files +
             css_to_wrapper_output_files + [ "printing_manager.mojom-webui.js" ]
  definitions = []
  deps = [
    "//third_party/polymer/v3_0:library",
    "//ui/webui/resources:library",
  ]
  extra_deps = [
    ":copy_webui_mojo",
    ":preprocess",
    ":preprocess_html_css",
  ]
}

generate_grd("build_grd") {
  input_files_base_dir = rebase_path(".", "//")
  input_files = static_resource_files

  deps = [ ":build_ts" ]

  manifest_files =
      filter_include(get_target_outputs(":build_ts"), [ "*.manifest" ])

  grd_prefix = "ash_print_management"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
}
