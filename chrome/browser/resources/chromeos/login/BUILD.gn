# Copyright 2018 The Chromium Authors. All rights reserved.
# Use of this source code is governed by a BSD-style license that can be
# found in the LICENSE file.

import("//chrome/common/features.gni")
import("//chrome/test/base/js2gtest.gni")
import("//third_party/closure_compiler/compile_js.gni")
import("//tools/grit/grit_rule.gni")
import("//tools/grit/preprocess_if_expr.gni")
import("//ui/webui/resources/tools/generate_grd.gni")
import("//ui/webui/resources/tools/js_modulizer.gni")
import("./oobe_auto_imports.gni")

assert(is_chromeos, "OOBE UI is only available on ChromeOS builds")

###################
#### RESOURCES ####
###################

# OOBE's default set of resources based on an automatically generated GRD file.
# These resources are made available to the WebUI through the generated C++ resource
# map. Since we use the AddResourcePaths method to add the full map instead of adding
# each resource path individually in oobe_ui.cc, this section is not suitable for
# serving files in a conditional manner. Thus the naming - unconditional_resources.
# -----------------------------------------------------------------------------
grit("unconditional_resources") {
  defines = chrome_grit_defines

  # This is necessary since the GRD is generated during build time.
  enable_input_discovery_for_gn_analyze = false

  source = "$target_gen_dir/oobe_unconditional_resources.grd"
  deps = [ ":build_oobe_grd" ]
  outputs = [
    "grit/oobe_unconditional_resources.h",
    "grit/oobe_unconditional_resources_map.h",
    "grit/oobe_unconditional_resources_map.cc",
    "oobe_unconditional_resources.pak",
  ]
  output_dir = "$root_gen_dir/chrome"
}

# Set of OOBE resources that need to be served conditionally during runtime
# depending on a feature/flag/condition/etc. Based on a manually created GRD
# for convenience.
# -----------------------------------------------------------------------------
grit("conditional_resources") {
  # Needed since some of the files are generated during build time.
  enable_input_discovery_for_gn_analyze = false

  source = "oobe_conditional_resources.grd"
  outputs = [
    "grit/oobe_conditional_resources.h",
    "oobe_conditional_resources.pak",
  ]

  deps = [ ":preprocess_conditional_autogenerated_modules" ]
  output_dir = "$root_gen_dir/chrome"
}

########################
#### GRD GENERATION ####
########################

autogenerated_unconditional_files_manifest =
    "autogenerated_unconditional_files_manifest.json"
autogenerated_conditional_files_manifest =
    "autogenerated_conditional_files_manifest.json"
web_components_manifest = "web_components_manifest.json"
existing_unconditional_files_manifest =
    "existing_unconditional_files_manifest.json"
oobe_preprocessed_folder = "oobe_preprocessed"

# Generates OOBE's default GRD file that contains only resources that are
# served unconditionally.
# -----------------------------------------------------------------------------
generate_grd("build_oobe_grd") {
  grd_prefix = "oobe_unconditional"
  out_grd = "$target_gen_dir/${grd_prefix}_resources.grd"
  deps = [
    ":preprocess_gen_js_files",
    ":preprocess_unconditional_autogenerated_modules",
    ":preprocess_unconditional_existing",
  ]
  manifest_files = [
    "$target_gen_dir/$autogenerated_unconditional_files_manifest",
    "$target_gen_dir/$existing_unconditional_files_manifest",
    "$target_gen_dir/$web_components_manifest",
  ]
  input_files = [
    # Lottie animation resources
    "animations/all_set_light.json",
    "animations/all_set_dark.json",
    "animations/checking_for_update.json",
    "animations/downloading_apps.json",
    "animations/gesture_go_back.json",
    "animations/gesture_go_home.json",
    "animations/gesture_hotseat_overview.json",
    "animations/welcome_screen_animation.json",

    # Vector resources
    "images/arc_sideloading_illustration.svg",
    "images/browser_sync.svg",
    "images/data_loss_warning.svg",
    "images/device-disabled.svg",
    "images/encryption_migration.svg",
    "images/enrollment_complete.svg",
    "images/error.svg",
    "images/kids_turn.svg",
    "images/kiosk_enrollment.svg",
    "images/parental_control.svg",
    "images/powerwash.svg",
    "images/pin_illustration.svg",
    "images/settings_gear.svg",
    "images/sync-consent.svg",
    "images/update_boot.svg",
    "images/cfm/enrollment.svg",
    "images/cfm/welcome.svg",
    "images/update-antivirus.svg",
    "images/update-apps.svg",
    "images/update-charge.svg",
    "images/update-not-needed.svg",
    "images/update-no-waiting.svg",
    "images/updating.svg",
    "images/google-accounts.svg",
    "images/os-install-success.svg",
    "../../settings/chromeos/images/smart_privacy.svg",
    "images/1x/thumbnail-theme-light-1x.png",
    "images/2x/thumbnail-theme-light-2x.png",
    "images/1x/thumbnail-theme-dark-1x.png",
    "images/2x/thumbnail-theme-dark-2x.png",
    "images/1x/thumbnail-theme-auto-1x.png",
    "images/2x/thumbnail-theme-auto-2x.png",
    "images/blazey_dark.svg",
    "images/blazey_light.svg",
  ]
  input_files_base_dir = rebase_path(".", "//")
  resource_path_rewrites = [
    "../../settings/chromeos/images/smart_privacy.svg|images/smart_privacy.svg",
  ]
}

# Preprocess existing and autogenerated files by copying them to an
# intermediate location and generating a manifest file to be used when
# generating OOBE's GRD file.
# -----------------------------------------------------------------------------

# Preprocess existing (not autogenerated) files.
preprocess_if_expr("preprocess_unconditional_existing") {
  out_folder = "$target_gen_dir/$oobe_preprocessed_folder"
  out_manifest = "$target_gen_dir/$existing_unconditional_files_manifest"
  in_files = [
    "i18n_setup.js",
    "oobe.css",
    "oobe.html",
    "oobe.js",
    "oobe_popup_overlay.css",
    "oobe_screen.css",
    "screens.js",
  ]
}

# Autogenerated files that are served conditionally
preprocess_if_expr("preprocess_conditional_autogenerated_modules") {
  deps = [ ":polymer3_elements" ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$oobe_preprocessed_folder"
  out_manifest = "$target_gen_dir/$autogenerated_conditional_files_manifest"
  in_files = [
    "components/oobe_vars/oobe_custom_vars_css.m.js",
    "components/oobe_vars/oobe_custom_vars_remora_css.m.js",
    "debug/debug.m.js",
    "test_api/test_api.m.js",
    "test_api/no_test_api.m.js",
  ]
}

# Autogenerated files that are served unconditionally
preprocess_if_expr("preprocess_unconditional_autogenerated_modules") {
  deps = [
    ":polymer3_elements",

    # Necessary for the file `keyboard_utils.m.js`
    "../keyboard:preprocess",
  ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$oobe_preprocessed_folder"
  out_manifest = "$target_gen_dir/$autogenerated_unconditional_files_manifest"
  in_files = [
    "cr_ui.m.js",
    "demo_mode_test_helper.m.js",
    "display_manager.m.js",
    "login_ui_tools.m.js",
    "multi_tap_detector.m.js",
    "components/behaviors/login_screen_behavior.m.js",
    "components/behaviors/multi_step_behavior.m.js",
    "components/behaviors/oobe_dialog_host_behavior.m.js",
    "components/behaviors/oobe_focus_behavior.m.js",
    "components/behaviors/oobe_i18n_behavior.m.js",
    "components/behaviors/oobe_i18n_mixin.m.js",
    "components/behaviors/i18n_mixin.m.js",
    "components/behaviors/oobe_scrollable_behavior.m.js",
    "components/buttons/oobe_back_button.m.js",
    "components/buttons/oobe_base_button.m.js",
    "components/buttons/oobe_icon_button.m.js",
    "components/buttons/oobe_next_button.m.js",
    "components/buttons/oobe_text_button.m.js",
    "components/dialogs/oobe_adaptive_dialog.m.js",
    "components/dialogs/oobe_content_dialog.m.js",
    "components/dialogs/oobe_loading_dialog.m.js",
    "components/dialogs/oobe_modal_dialog.m.js",
    "components/common_styles/common_styles.m.js",
    "components/common_styles/cr_card_radio_group_styles.m.js",
    "components/common_styles/oobe_dialog_host_styles.m.js",
    "components/common_styles/oobe_flex_layout_styles.m.js",
    "components/oobe_apps_list.m.js",
    "components/oobe_carousel.m.js",
    "components/oobe_slide.m.js",
    "components/oobe_vars/oobe_shared_vars_css.m.js",
    "components/progress_list_item/progress_list_item.m.js",
    "components/display_manager_types.m.js",
    "components/gaia_dialog.m.js",
    "components/gaia_header.m.js",
    "components/gaia_button.m.js",
    "components/gaia_input_form.m.js",
    "components/hd_iron_icon.m.js",
    "components/long_touch_detector.m.js",
    "components/network_select_login.m.js",
    "components/notification_card.m.js",
    "components/oobe_a11y_option.m.js",
    "components/oobe_cr_lottie.m.js",
    "components/oobe_i18n_dropdown.m.js",
    "components/oobe_icons.m.js",
    "components/oobe_network_icons.m.js",
    "components/oobe_select.m.js",
    "components/oobe_types.m.js",
    "components/security_token_pin.m.js",
    "components/test_util.m.js",
    "components/throbber_notice.m.js",
    "components/web_view_helper.m.js",
    "components/web_view_loader.m.js",
    "screens/common/app_downloading.m.js",
    "screens/common/app_launch_splash.m.js",
    "screens/common/assistant_optin.m.js",
    "screens/common/autolaunch.m.js",
    "screens/common/consolidated_consent.m.js",
    "screens/common/device_disabled.m.js",
    "screens/common/enable_kiosk.m.js",
    "screens/common/error_message.m.js",
    "screens/common/family_link_notice.m.js",
    "screens/common/fingerprint_setup.m.js",
    "screens/common/gaia_signin.m.js",
    "screens/common/gesture_navigation.m.js",
    "screens/common/guest_tos.m.js",
    "screens/common/hw_data_collection.m.js",
    "screens/common/managed_terms_of_service.m.js",
    "screens/common/marketing_opt_in.m.js",
    "screens/common/multidevice_setup.m.js",
    "screens/common/offline_ad_login.m.js",
    "screens/common/os_trial.m.js",
    "screens/common/oobe_eula.m.js",
    "screens/common/oobe_reset.m.js",
    "screens/common/os_install.m.js",
    "screens/common/parental_handoff.m.js",
    "screens/common/pin_setup.m.js",
    "screens/common/recommend_apps.m.js",
    "screens/common/saml_confirm_password.m.js",
    "screens/common/signin_fatal_error.m.js",
    "screens/common/smart_privacy_protection.m.js",
    "screens/common/sync_consent.m.js",
    "screens/common/theme_selection.m.js",
    "screens/common/tpm_error.m.js",
    "screens/common/user_creation.m.js",
    "screens/common/wrong_hwid.m.js",
    "screens/login/active_directory_password_change.m.js",
    "screens/login/gaia_password_changed.m.js",
    "screens/login/lacros_data_migration.m.js",
    "screens/login/management_transition.m.js",
    "screens/login/offline_login.m.js",
    "screens/login/checking_downloading_update.m.js",
    "screens/login/update_required_card.m.js",
    "screens/oobe/auto_enrollment_check.m.js",
    "screens/oobe/demo_preferences.m.js",
    "screens/oobe/demo_setup.m.js",
    "screens/oobe/enable_debugging.m.js",
    "screens/oobe/enterprise_enrollment.m.js",
    "screens/oobe/hid_detection.m.js",
    "screens/oobe/oobe_network.m.js",
    "screens/oobe/update.m.js",
    "screens/oobe/packaged_license.m.js",
    "screens/oobe/quick_start.m.js",
    "screens/oobe/welcome.m.js",
    "screens/oobe/welcome_dialog.m.js",

    # Special files.
    "keyboard_utils.m.js",  # See chromeos/keyboard/BUILD.gn
  ]
}

preprocess_if_expr("preprocess_gen_js_files") {
  defines = chrome_grit_defines
  deps = [ ":generate_web_components" ]
  in_folder = target_gen_dir
  out_folder = "$target_gen_dir/$oobe_preprocessed_folder"
  out_manifest = "$target_gen_dir/$web_components_manifest"

  in_files = [
    "screens/common/adb_sideloading.js",
    "screens/common/arc_terms_of_service.js",
    "screens/login/encryption_migration.js",
  ]
}

# Main group for Polymer3 elements
group("polymer3_elements") {
  public_deps = [
    ":modulize",
    "../keyboard:modulize",
    "components:polymer3_elements",
    "debug:modulize",
    "screens/common:polymer3_elements",
    "screens/login:polymer3_elements",
    "screens/oobe:polymer3_elements",
    "test_api:modulize",
  ]
}

group("generate_web_components") {
  public_deps = [ 
    "screens/common:web_components",
    "screens/login:web_components",
  ]
}

group("closure_compile") {
  deps = [
    "components:closure_compile",

    # TODO(crbug.com/1229130)
    # Uncomment once most screens are migrated.
    #"debug:closure_compile",

    ":closure_compile_local",
    "screens/common:closure_compile",
    "screens/login:closure_compile",
    "screens/oobe:closure_compile",
    "test_api:closure_compile",
  ]
}

js_type_check("closure_compile_local") {
  is_polymer3 = true
  closure_flags = default_closure_args
  deps = [
    ":cr_ui.m",
    ":demo_mode_test_helper.m",
    ":display_manager.m",
    ":login_ui_tools.m",
    ":multi_tap_detector.m",
  ]
}

###############################
# Closure compiler libraries below

js_library("login_ui_tools") {
}

js_library("i18n_setup") {
  deps = [ "//ui/webui/resources/js:load_time_data.m" ]
}

js_library("cr_ui.m") {
  sources =
      [ "$root_gen_dir/chrome/browser/resources/chromeos/login/cr_ui.m.js" ]
  deps = [
    ":demo_mode_test_helper.m",
    ":display_manager.m",
    "//ui/webui/resources/js:cr.m",
    "//ui/webui/resources/js:load_time_data.m",
  ]
  extra_deps = [ ":modulize" ]
}

js_library("demo_mode_test_helper.m") {
  sources = [ "$root_gen_dir/chrome/browser/resources/chromeos/login/demo_mode_test_helper.m.js" ]
  deps = [ "//ui/webui/resources/js:util.m" ]
  extra_deps = [ ":modulize" ]
}

js_library("display_manager.m") {
  sources = [ "$root_gen_dir/chrome/browser/resources/chromeos/login/display_manager.m.js" ]
  deps = [
    ":multi_tap_detector.m",
    "../keyboard:keyboard_utils.m",
    "components:display_manager_types.m",
    "components:oobe_types.m",
  ]
  extra_deps = [
    ":modulize",
    "../keyboard:modulize",
  ]
}

js_library("login_ui_tools.m") {
  sources = [
    "$root_gen_dir/chrome/browser/resources/chromeos/login/login_ui_tools.m.js",
  ]
  deps = []
  extra_deps = [ ":modulize" ]
}

js_library("multi_tap_detector.m") {
  sources = [ "$root_gen_dir/chrome/browser/resources/chromeos/login/multi_tap_detector.m.js" ]
  deps = []
  extra_deps = [ ":modulize" ]
}

js_modulizer("modulize") {
  input_files = [
    "cr_ui.js",
    "demo_mode_test_helper.js",
    "display_manager.js",
    "login_ui_tools.js",
    "multi_tap_detector.js",
  ]
  namespace_rewrites = [ "cr.ui.toCssPx|toCssPx" ]
}
