// Copyright 2020 The Chromium Authors. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

module blink.mojom;

import "url/mojom/url.mojom";

// Implementation of the proposed WebID API.
//
// Proposal: https://github.com/WICG/WebID

// Represents the fetch result from a federated authentication request. It is
// used to determine whether a JavaScript exception should be thrown, and what
// the error message of such exception should say. This enum is a subset of
// FederatedAuthRequestResult in
// third_party/blink/public/mojom/devtools/inspector_issue.mojom.
enum RequestTokenStatus {
  kSuccess,
  kApprovalDeclined,
  kErrorTooManyRequests,
  kErrorCanceled,
  kError,
};

enum LogoutRpsStatus {
  kSuccess,
  kErrorTooManyRequests,
  kError,
};

// The details of a single logout request from an identity provider.
struct LogoutRpsRequest {
  // URL to which the request will be sent. The origin is validated to
  // have an associated active session.
  url.mojom.Url url;

  // Identifier for the account being logged out. This is used to verify that
  // the logout request correlates to a previous sign-in event, and will
  // result in the corresponding active session being terminated.
  string account_id;
};

// The details of an identity provider.
struct IdentityProvider {
  url.mojom.Url config_url;

  // Can be an empty string to be omitted in the request sent to the provider.
  string client_id;

  // Can be an empty string to be omitted in the request sent to the provider.
  string nonce;
};

// Create a federated sign-in request using the specified provider.
// This interface is called from a renderer process and implemented in the
// browser process.
interface FederatedAuthRequest {
  // Requests a token to be generated, given an IdentityProvider.
  // Returns the raw content of the token.
  RequestToken(IdentityProvider identity_provider_ptr,
                 bool prefer_auto_sign_in) =>
      (RequestTokenStatus status, string? token);

  // Cancels the pending token request, if any.
  CancelTokenRequest();

  // Contact the list of Relying Party logout endpoints and account IDs to
  // attempt to initiate user logout.
  LogoutRps(array<LogoutRpsRequest> rp_logout_requests) => (LogoutRpsStatus status);
};
