This is a testharness.js-based test.
PASS 'rotate(acos(1))' as a specified value should serialize as 'rotate(calc(0deg))'.
PASS 'rotate(calc(acos(1)))' as a specified value should serialize as 'rotate(calc(0deg))'.
PASS 'rotate(acos(-1))' as a specified value should serialize as 'rotate(calc(180deg))'.
PASS 'rotate(calc(acos(-1)))' as a specified value should serialize as 'rotate(calc(180deg))'.
PASS 'rotate(acos(-1.5))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(acos(-1.5)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(acos(1.5))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(acos(1.5)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(acos(2))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(acos(2)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(acos(0.5))' as a specified value should serialize as 'rotate(calc(60deg))'.
PASS 'rotate(calc(acos(0.5)))' as a specified value should serialize as 'rotate(calc(60deg))'.
PASS 'rotate(acos(1 - 0.5))' as a specified value should serialize as 'rotate(calc(60deg))'.
PASS 'rotate(calc(acos(1 - 0.5)))' as a specified value should serialize as 'rotate(calc(60deg))'.
PASS 'rotate(acos(0))' as a specified value should serialize as 'rotate(calc(90deg))'.
PASS 'rotate(calc(acos(0)))' as a specified value should serialize as 'rotate(calc(90deg))'.
PASS 'rotate(asin(1))' as a specified value should serialize as 'rotate(calc(90deg))'.
PASS 'rotate(calc(asin(1)))' as a specified value should serialize as 'rotate(calc(90deg))'.
PASS 'rotate(asin(-1))' as a specified value should serialize as 'rotate(calc(-90deg))'.
PASS 'rotate(calc(asin(-1)))' as a specified value should serialize as 'rotate(calc(-90deg))'.
PASS 'rotate(asin(-1.5))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(asin(-1.5)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(asin(1.5))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(asin(1.5)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(asin(2))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(calc(asin(2)))' as a specified value should serialize as 'rotate(calc(NaN * 1deg))'.
PASS 'rotate(asin(0.5))' as a specified value should serialize as 'rotate(calc(30deg))'.
PASS 'rotate(calc(asin(0.5)))' as a specified value should serialize as 'rotate(calc(30deg))'.
PASS 'rotate(asin(1 - 0.5))' as a specified value should serialize as 'rotate(calc(30deg))'.
PASS 'rotate(calc(asin(1 - 0.5)))' as a specified value should serialize as 'rotate(calc(30deg))'.
PASS 'rotate(asin(0))' as a specified value should serialize as 'rotate(calc(0deg))'.
PASS 'rotate(calc(asin(0)))' as a specified value should serialize as 'rotate(calc(0deg))'.
FAIL 'rotate(acos(pi - pi))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(acos(pi - pi))' should be valid in transform. got disallowed value ""
FAIL 'rotate(calc(acos(pi - pi)))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(calc(acos(pi - pi)))' should be valid in transform. got disallowed value ""
FAIL 'rotate(asin(pi - pi + 1))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(asin(pi - pi + 1))' should be valid in transform. got disallowed value ""
FAIL 'rotate(calc(asin(pi - pi + 1)))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(calc(asin(pi - pi + 1)))' should be valid in transform. got disallowed value ""
FAIL 'rotate(atan(infinity))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(atan(infinity))' should be valid in transform. got disallowed value ""
FAIL 'rotate(calc(atan(infinity)))' as a specified value should serialize as 'rotate(calc(90deg))'. assert_not_equals: 'rotate(calc(atan(infinity)))' should be valid in transform. got disallowed value ""
Harness: the test ran to completion.

